{"version":3,"sources":["Calc.js","App.js","serviceWorker.js","index.js"],"names":["Calc","props","handleprincipalChange","event","setState","principal","target","value","handleprincipalChange2","intRate","handleprincipalChange3","term","exe","answer","parseInt","state","toFixed","salesTaxCashAmt","MoTax","preventDefault","className","onSubmit","this","type","name","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAgFeA,E,kDA9EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,sBAAwB,SAACC,GACtB,EAAKC,SAAS,CACVC,UAAUF,EAAMG,OAAOC,SAhBX,EAoBnBC,uBAAyB,SAACL,GACtB,EAAKC,SAAS,CACVK,QAAQN,EAAMG,OAAOC,SAtBV,EA0BlBG,uBAAyB,SAACP,GACvB,EAAKC,SAAS,CACVO,KAAKR,EAAMG,OAAOC,SA5BP,EAiCnBK,IAAM,SAACT,GACH,EAAKC,SAAS,CACVS,OAAQC,SAAU,EAAKC,MAAMV,WAAc,EAAK,EAAKU,MAAMN,QAAQ,IAAMK,SAAS,EAAKC,MAAMJ,OAAQK,QAAQ,IAC7GC,gBAAiBH,SAAS,EAAKC,MAAMV,WAAa,EAAKU,MAAMG,MAAM,MAAMF,QAAQ,KAKrFb,EAAMgB,kBAvCN,EAAKJ,MAAO,CACRV,UAAW,GACXI,QAAS,GACTE,KAAK,GACLE,OAAQ,GACRI,gBAAiB,GACjBC,MAAO,MARI,E,qDA+Cf,OAEI,yBAAKE,UAAU,aACf,0DACK,0BAAMC,SAAUC,KAAKV,KAClB,mDACA,2BAAOQ,UAAU,eAAeG,KAAK,SAAShB,MAAOe,KAAKP,MAAMV,UAAWmB,KAAK,YAAYC,SAAUH,KAAKpB,wBAE3G,mEACA,2BAAOkB,UAAU,eAAeG,KAAK,SAAShB,MAAOe,KAAKP,MAAMN,QAASe,KAAK,YAAYC,SAAUH,KAAKd,yBAEzG,0DACA,2BAAOY,UAAU,eAAeG,KAAK,SAAShB,MAAOe,KAAKP,MAAMJ,KAAMa,KAAK,YAAYC,SAAUH,KAAKZ,yBACtG,4BAAQU,UAAU,mBAAlB,WAMR,6CAAoBE,KAAKP,MAAMF,QAC/B,6CAAoBS,KAAKP,MAAMG,MAA/B,MACA,gDAAuBI,KAAKP,MAAME,sB,GArE3BS,aCWJC,MARf,WACE,OACE,yBAAKP,UAAU,OACX,kBAAC,EAAD,QCKYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c068b8b9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nclass Calc extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            principal: '',\n            intRate: '',\n            term:'',\n            answer: '',\n            salesTaxCashAmt: '',\n            MoTax: 4.92\n        }\n    }\n\n \n\n    handleprincipalChange = (event) => {\n       this.setState({\n           principal:event.target.value\n       })\n    }\n\n    handleprincipalChange2 = (event) => {\n        this.setState({\n            intRate:event.target.value\n        })\n     }\n\n     handleprincipalChange3 = (event) => {\n        this.setState({\n            term:event.target.value\n        })\n     }\n\n\n    exe = (event) => {\n        this.setState({\n            answer: parseInt((this.state.principal) * (1 + (this.state.intRate/100 * parseInt(this.state.term))).toFixed(2)),\n            salesTaxCashAmt: parseInt(this.state.principal * (this.state.MoTax/100)).toFixed(2),\n        \n            \n        });\n     \n        event.preventDefault();\n        \n    }\n\n    \n    render() {\n        return (\n        \n            <div className=\"container\">\n            <h1>Simple Interest Calcluator</h1>\n                 <form onSubmit={this.exe}>\n                    <label>Enter Principal:</label>\n                    <input className=\"form-control\" type=\"number\" value={this.state.principal} name=\"principal\" onChange={this.handleprincipalChange}></input>\n\n                    <label>Enter interest rate principal %:</label>\n                    <input className=\"form-control\" type=\"number\" value={this.state.intRate} name=\"principal\" onChange={this.handleprincipalChange2}></input>\n                   \n                    <label>Enter Years to Finance:</label>\n                    <input className=\"form-control\" type=\"number\" value={this.state.term} name=\"principal\" onChange={this.handleprincipalChange3}></input>\n                    <button className=\"btn btn-primary\">Submit</button>\n            \n          \n\n            \n            </form>\n            <h4>Your Price: $ { this.state.answer }</h4>\n            <h6>Mo sales tax: { this.state.MoTax } %</h6>\n            <h6>Your sales tax:$ { this.state.salesTaxCashAmt }</h6>\n\n\n        \n        </div>\n    \n        )\n    }\n}\n\nexport default Calc\n","import React from 'react';\nimport Calc from './Calc';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Calc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}